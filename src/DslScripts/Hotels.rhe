Module Hotels
{
    Entity Hotel
    {
        ShortString Name;
        ShortString Address;
		
		//#2-1c - Lock
		ItemFilter ContainsLockMark 'item => item.Name.Contains("lock")';
		Lock ContainsLockMark '[Test] Name contains lock mark.';
	
		//#3.2.3a
		ComposableFilterBy NameSearch '(query, repository, parameter) =>
		{
			return query.Where(item => item.Name.Contains(parameter.Pattern));
		}';
    }
	//#3.2.3b
	Parameter NameSearch
	{
		ShortString Pattern;
	}
	
	Entity Guest
    {
        ShortString Name;
        ShortString Surname;
		ShortString Phone;
		// #2-1b
		ShortString Email { RegExMatch "(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*)@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])" "Neispravna e-mail adresa."; }
    }
	
	Entity RoomKind
    {
        ShortString Name;
        Decimal Price;
    }
	
	Entity Room
    {
        ShortString RoomNumber { Required; Unique; AutoCode; } //#2-1c - Autocode
        Reference Hotel { Detail; } //#2-1b
		Reference RoomKind { Required; } //#2-1b
		ShortString Remark;
		
		//UniqueMultiple 'Hotel RoomKind'; //ovo je samo bio test da li radi, inače nema baš smisla pa sam zakomentirao
		
		Logging { AllProperties; } //#2-1c - Logging
    }
	
	Entity Good
	{
		ShortString Name;
		Decimal Price;
	}
	
	Entity GoodKind
	{
		ShortString Name { Unique; Required; }
	}
	
	Entity Service
	{
		Reference GoodKind;
		Extends Hotels.Good;
	}
	
	Entity Product
	{
		Reference GoodKind;
		Extends Hotels.Good;
	}
	
	Entity Reservation
	{
		DateTime DateFrom;
		DateTime DateTo;
		Reference Guest;
		Reference Room; 
	}
	
	// #2-2b
	SqlQueryable ReservationsForCertainRoom
    "
        SELECT
            r.ID,
            NumberOfReservations = COUNT(res.ID)
        FROM
            Hotels.Room r
            LEFT JOIN Hotels.Reservation res ON res.RoomID = r.ID
        GROUP BY
            r.ID
    "
	{
		Extends Hotels.Room;
		Integer NumberOfReservations;

		AutodetectSqlDependencies;
	}
	
	// #2-2c
	Browse RoomGrid Hotels.Room
	{
		Take RoomNumber;
		Take 'Hotel.Name';
		Take NumberOfReservations 'Extension_ReservationsForCertainRoom.NumberOfReservations';
	}
	
	// #2-3c
	Action InsertViseSoba '(parameter, repository, userInfo) =>
	{
		for (int i=0; i<parameter.RoomCount; i++)
		{
			var newRoom = new Hotels.Room 
			{ 
				RoomNumber = parameter.Prefix, 
				Remark = parameter.Remark, 
				HotelID = parameter.HotelID,
				RoomKindID = parameter.RoomKindID
			};
			repository.Hotels.Room.Insert(newRoom);
		}
	}'
	{
        Integer RoomCount;
        ShortString Remark;
		ShortString Prefix;
		Guid HotelID;
		Guid RoomKindID;
    }
	
	Entity Invoice
	{
		Decimal Amount;
		Integer Discount { MinValue 0; MaxValue 1; }
		Bool Payed;
		Reference Reservation;
	}
	
	Entity Item
	{
		ShortString Name;
		Reference Good;
		Reference Invoice;
	}
	
	//#3.LowLevelConcepts
	SqlView HotelsDoesNotContainLockMark 'SELECT * FROM Hotels.Hotel WHERE Name NOT LIKE ''%lock%'''
    {
        AutoDetectSqlDependencies;
    }
	
	SqlQueryable NumberOfRoomsWithoutLockMark
    "
        SELECT
            h.ID,
            NumberOfRooms = CASE
				WHEN hdnclm.ID IS NOT NULL THEN COUNT(r.ID)
				ELSE 0
			END
        FROM
            Hotels.Hotel h
			LEFT JOIN Hotels.HotelsDoesNotContainLockMark hdnclm ON hdnclm.ID = h.ID
            LEFT JOIN Hotels.Room r ON r.HotelID = h.ID
        GROUP BY
            h.ID,
			hdnclm.ID
    "
	{
		Extends Hotels.Hotel;
		Integer NumberOfRooms;

		AutodetectSqlDependencies;
	}
}